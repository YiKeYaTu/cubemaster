webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },

/***/ 1:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(159);

	var _redux = __webpack_require__(160);

	var _reactRedux = __webpack_require__(173);

	var _combination_reducers = __webpack_require__(186);

	var _combination_reducers2 = _interopRequireDefault(_combination_reducers);

	var _combination = __webpack_require__(190);

	var _combination2 = _interopRequireDefault(_combination);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var store = (0, _redux.createStore)(_combination_reducers2.default);

	(0, _reactDom.render)(_react2.default.createElement(
	    _reactRedux.Provider,
	    { store: store },
	    _react2.default.createElement(_combination2.default, null)
	), document.getElementById('container'));

/***/ },

/***/ 186:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _redux = __webpack_require__(160);

	var _header_reducers = __webpack_require__(187);

	var _combination_action = __webpack_require__(189);

	var INIT_POS = '-60px',
	    NEXT_POS = '0px',
	    INIT_HTML = '待插入',
	    NEXT_HTML = '已插入';

	var dataItem = _getInf([{ value: '我是数214421421据1' }, 0, 0, 0], '0');

	var algorithmItem = _getInf([0, 0, 0, 0], '1');

	var _INIT_LEFT = '525px';

	function getInitData() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? dataItem : arguments[0];
	    var action = arguments[1];

	    switch (action.type) {
	        default:
	            return state;
	    }
	}

	function getInitAlgorithmItem() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? algorithmItem : arguments[0];
	    var action = arguments[1];

	    switch (action.type) {
	        default:
	            return state;
	    }
	}

	function connect() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {
	        activeIndex: [],
	        parentIndex: null,
	        childIndex: null,
	        connectIndex: []
	    } : arguments[0];
	    var action = arguments[1];

	    switch (action.type) {
	        case _combination_action.ADD_ACTIVE_INDEX:
	            var activeIndex = state.activeIndex;
	            var newActiveIndex = activeIndex.map(function (item) {
	                return item;
	            });
	            newActiveIndex.push(action.obj);
	            if (newActiveIndex.length === 2) {
	                //交换button位置
	                if (newActiveIndex[0].buttonType == 0) {
	                    var temp = newActiveIndex[0];
	                    newActiveIndex[0] = newActiveIndex[1];
	                    newActiveIndex[1] = temp;
	                }

	                if ((status = _handleConnectButtonJudConnect(newActiveIndex)) !== 200) {
	                    return _cannotConnect(status);
	                }
	                _updateConnectIndex(newActiveIndex);
	            } else if (newActiveIndex.length === 1) {
	                return {
	                    activeIndex: newActiveIndex,
	                    parentIndex: null,
	                    childIndex: null,
	                    connectIndex: []
	                };
	            }
	        default:
	            return state;
	    }
	}

	function __handleConnectButtonJudConnect(activeIndex) {
	    var _this = this;

	    var connectIndex = this.state.connectIndex;
	    var flag = 200;
	    var parent = void 0;
	    if (activeIndex[0].buttonType === activeIndex[1].buttonType) {
	        //是不是不同的接口 左  右
	        flag = 400;
	        return flag;
	    }
	    connectIndex.forEach(function (item, index) {
	        if (item) {
	            _this.walkTree(item, function (node) {
	                if (node.type == activeIndex[0].type && node.index == activeIndex[0].index) {
	                    _this.state.parentIndex = node;
	                } else if (node.type == activeIndex[1].type && node.index == activeIndex[1].index) {
	                    _this.state.childIndex = node;
	                }
	            });
	        }
	    });
	    return flag;
	}

	//将接受到的item数据转化成对象的形式
	function _getInf(item, type) {
	    var obj = {};
	    item.forEach(function (item, index) {
	        obj[type + index] = {
	            index: index,
	            type: type,
	            itemLeft: type == 1 ? 460 + index % 2 * 120 + 'px' : 100 + index % 2 * 120 + 'px',
	            itemTop: Math.floor(index / 2) * 120 + 'px',
	            value: item.value, //数据或者算法的名称
	            right: INIT_POS, //数据或者算法左边元素的遮盖层的right
	            background: 'rgb(' + _randomColor() + ', ' + _randomColor() + ', ' + _randomColor() + ')', //元素的颜色
	            itemHasAdd: false, //这个元素是否被插入到canvas上
	            buttonInnerHTML: INIT_HTML };
	    });
	    //遮盖层显示什么
	    return obj;
	}

	function _randomColor() {
	    return Math.floor(Math.random() * 60 + 150);
	}

	var combinationReducers = (0, _redux.combineReducers)({
	    move: (0, _header_reducers.move)(_INIT_LEFT),
	    getInitData: getInitData,
	    getInitAlgorithmItem: getInitAlgorithmItem,
	    connect: connect,
	    INIT_LEFT: function INIT_LEFT() {
	        return _INIT_LEFT;
	    }
	});

	exports.default = combinationReducers;

/***/ },

/***/ 189:
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.addActiveIndex = addActiveIndex;
	var ADD_ACTIVE_INDEX = exports.ADD_ACTIVE_INDEX = 'ADD_ACTIVE_INDEX';

	function addActiveIndex(obj) {
	    return {
	        type: ADD_ACTIVE_INDEX,
	        obj: obj
	    };
	}

/***/ },

/***/ 190:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(173);

	var _content = __webpack_require__(191);

	var _content2 = _interopRequireDefault(_content);

	var _Content = __webpack_require__(195);

	var _Content2 = _interopRequireDefault(_Content);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var App = function (_Component) {
	    _inherits(App, _Component);

	    function App() {
	        _classCallCheck(this, App);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(App).apply(this, arguments));
	    }

	    _createClass(App, [{
	        key: 'render',
	        value: function render() {
	            // console.log(this.props);
	            return _react2.default.createElement(
	                'section',
	                {
	                    style: {
	                        width: '100%'
	                    }
	                },
	                _react2.default.createElement(_content2.default, this.props),
	                _react2.default.createElement(_Content2.default, this.props)
	            );
	        }
	    }]);

	    return App;
	}(_react.Component);

	exports.default = (0, _reactRedux.connect)(function (state) {
	    return {
	        move: state.move,
	        initData: state.getInitData,
	        initAlgorithmItem: state.getInitAlgorithmItem,
	        connectInf: state.connect,
	        INIT_LEFT: state.INIT_LEFT
	    };
	})(App);

/***/ },

/***/ 195:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _data_item = __webpack_require__(196);

	var _data_item2 = _interopRequireDefault(_data_item);

	var _combination = __webpack_require__(197);

	var _combination2 = _interopRequireDefault(_combination);

	var _combination_action = __webpack_require__(189);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function getFreeContentHeight() {
	    return window.innerHeight - 60;
	}

	function objToArr(obj) {
	    var dataInf = [];
	    for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            dataInf.push(obj[key]);
	        }
	    }
	    return dataInf;
	}

	var Content = _react2.default.createClass({
	    displayName: 'Content',

	    //初始化 数据元素   算法元素的stateINIT_POS = '-60px',
	    nextPos: '0px',
	    initPos: '-60px',
	    initInnerHTML: '待插入',
	    nextInnerHTML: '已插入',
	    getInitialState: function getInitialState() {
	        return {
	            dataInf: this.props.initData,
	            algorithmInf: this.props.initAlgorithmItem,
	            activeIndex: [], // 正在执行连接元素
	            parentIndex: null, //正在执行连接元素的父节点
	            childIndex: null,
	            activeEl: null, //正在被拖动的dom元素
	            connectIndex: [] };
	    },
	    // 已经连接的元素  通过树进行连接 通过接口判断是否可以连接

	    //给连接点添加事件  点击后将该元素纳入state里面的activeIndex里面
	    //如果activeIndex的length === 2那么就执行连接判断

	    //将connectIndex进行更新
	    updateConnectIndex: function updateConnectIndex(activeIndex) {
	        var _this = this;

	        var root = this.state.connectIndex,
	            parent = this.state.parentIndex,
	            child = this.state.childIndex;

	        var createStateConnectNode = this.createStateConnectNode,
	            clearRootChild = this.clearRootChild,
	            judInterface = this.judInterface;

	        if (!judInterface(parent, child)) {
	            this.cannotConnect('端口被占用');
	        } else {
	            if (parent && child) {
	                clearRootChild();
	                parent.child.push(child);
	                parent.data.connectInterface.outInterface = false;
	                child.data.connectInterface.inInterface = false;
	            } else if (parent && !child) {
	                parent.child.push(createStateConnectNode(activeIndex[1]));
	                parent.data.connectInterface.outInterface = false;
	            } else if (!parent && child) {
	                child.data.connectInterface.inInterface = false;
	                var temp = createStateConnectNode(activeIndex[0]);
	                temp.child.push(child);
	                clearRootChild();
	                root = this.state.connectIndex;
	                root.push(temp);
	            } else {
	                var _temp = createStateConnectNode(activeIndex[0]);
	                _temp.child.push(createStateConnectNode(activeIndex[1]));
	                root.push(_temp);
	            }
	        }
	        this.setState({
	            parentIndex: null,
	            childIndex: null,
	            activeIndex: [],
	            connectIndex: this.state.connectIndex
	        }, function () {
	            console.log(_this.state.connectIndex);
	        });
	    },

	    //删除root节点中的将要被插入其他子节点的节点
	    clearRootChild: function clearRootChild() {
	        var child = this.state.childIndex;

	        this.state.connectIndex = this.state.connectIndex.filter(function (item, index) {
	            if (item.data.type != child.data.type || item.data.index != child.data.index) {
	                return item;
	            }
	        });
	    },

	    //点击时判断这个节点端口是否已经被占用
	    judClickInterface: function judClickInterface(typeId, indexId, buttonType) {
	        var id = typeId + indexId;
	        var data = void 0;
	        if (typeId == 0) {
	            data = this.state.dataInf;
	        } else if (typeId == 1) {
	            data = this.state.algorithmInf;
	        }
	        // console.log(data[id].connectInterface)
	        if (buttonType == 0) {
	            return !data[id].connectInterface || data[id].connectInterface.inInterface;
	        } else if (buttonType == 1) {
	            return !data[id].connectInterface || data[id].connectInterface.outInterface;
	        }
	    },
	    judInterface: function judInterface(parent, child) {
	        if (parent && child) {
	            return parent.data.connectInterface.outInterface && child.data.connectInterface.inInterface;
	        } else if (parent && !child) {
	            return parent.data.connectInterface.outInterface;
	        } else if (!parent && child) {
	            return child.data.connectInterface.inInterface;
	        } else {
	            return true;
	        }
	    },

	    // 创建节点 放入树中
	    createStateConnectNode: function createStateConnectNode(inf) {
	        var data = void 0;
	        var type = inf.type,
	            buttonType = inf.buttonType;
	        if (type == 0) {
	            data = this.state.dataInf[inf.type + inf.index];
	        } else if (type == 1) {
	            data = this.state.algorithmInf[inf.type + inf.index];
	        }
	        data.connectInterface = {
	            inInterface: buttonType === 1 ? true : false,
	            outInterface: buttonType === 1 ? false : true
	        };
	        data.pos = inf.pos;
	        return {
	            data: data,
	            child: []
	        };
	    },
	    cannotConnect: function cannotConnect(error) {
	        alert(error);
	    },


	    //遍历整个树
	    walkTree: function walkTree(node, callback) {
	        var i = 0;
	        callback(node);
	        node = node.child;
	        while (node[i]) {
	            node && this.walkTree(node[i++], callback);
	        }
	    },

	    //找出对应type的state
	    getData: function getData(type) {
	        return type == 0 ? this.state.dataInf : this.state.algorithmInf;
	    },

	    //设定对应type的state
	    chooseDataToset: function chooseDataToset(typeId, data, callback) {
	        if (typeId == 0) {
	            this.setState({
	                dataInf: data
	            }, callback);
	        } else if (typeId == 1) {
	            this.setState({
	                algorithmInf: data
	            }, callback);
	        }
	    },

	    //判断两点是否可以连接  并且拿出父节点
	    handleConnectButtonJudConnect: function handleConnectButtonJudConnect(activeIndex) {
	        var _this2 = this;

	        var connectIndex = this.state.connectIndex;
	        var flag = 200;
	        var parent = void 0;
	        if (activeIndex[0].buttonType === activeIndex[1].buttonType) {
	            //是不是不同的接口 左  右
	            flag = 400;
	            return flag;
	        }
	        connectIndex.forEach(function (item, index) {
	            if (item) {
	                _this2.walkTree(item, function (node) {
	                    if (node.data.type == activeIndex[0].type && node.data.index == activeIndex[0].index) {
	                        _this2.state.parentIndex = node;
	                    } else if (node.data.type == activeIndex[1].type && node.data.index == activeIndex[1].index) {
	                        _this2.state.childIndex = node;
	                    }
	                });
	            }
	        });
	        return flag;
	    },
	    handleConnectButtonClick: function handleConnectButtonClick(typeId, indexId, buttonType, pos) {
	        var activeIndex = this.state.activeIndex.slice();
	        var status = void 0;

	        if (!this.judClickInterface(typeId, indexId, buttonType)) {
	            return this.cannotConnect('端口被占用');
	        }

	        activeIndex.push({
	            type: typeId,
	            index: indexId,
	            buttonType: buttonType,
	            pos: pos
	        });
	        if (activeIndex.length === 2) {
	            //交换button位置
	            if (activeIndex[0].buttonType == 0) {
	                var temp = activeIndex[0];
	                activeIndex[0] = activeIndex[1];
	                activeIndex[1] = temp;
	            }

	            if ((status = this.handleConnectButtonJudConnect(activeIndex)) !== 200) {
	                this.cannotConnect(status);
	            } else {
	                this.updateConnectIndex(activeIndex);
	            }
	        } else if (activeIndex.length === 1) {
	            this.setState({
	                activeIndex: activeIndex
	            });
	        }
	    },

	    //封装数据 算法元素的鼠标事件
	    handleOverAndOut: function handleOverAndOut(typeId, indexId, type) {
	        var data = this.getData(typeId);
	        var id = typeId + indexId;
	        if (data[id].itemHasAdd) return;
	        data[id].right = type === 0 ? this.nextPos : this.initPos;
	        this.chooseDataToset(typeId, data);
	    },

	    //封装数据 算法元素的鼠标事件
	    handleMouseOver: function handleMouseOver(type, index) {
	        this.handleOverAndOut(type, index, 0);
	    },

	    //封装数据 算法元素的鼠标事件
	    handleMouseOut: function handleMouseOut(type, index) {
	        this.handleOverAndOut(type, index, 1);
	    },

	    //封装数据 算法元素的鼠标事件
	    //点击元素后 将该元素加入到组合池里
	    handleClick: function handleClick(typeId, indexId, buttonType) {
	        var data = this.getData(typeId);
	        var id = typeId + indexId;
	        if (data[id].itemHasAdd) return;
	        data[id].right = this.nextPos;
	        data[id].itemHasAdd = true;
	        data[id].buttonInnerHTML = this.nextInnerHTML;
	        this.chooseDataToset(typeId, data);
	    },

	    //插入元素的删除按钮点击后删除该元素
	    handleRemoveButtonClick: function handleRemoveButtonClick(typeId, indexId) {
	        var data = this.getData(typeId);
	        var id = typeId + indexId;
	        data[id].right = this.initPos;
	        data[id].itemHasAdd = false;
	        data[id].buttonInnerHTML = this.initInnerHTML;
	        this.chooseDataToset(typeId, data);
	        this.removeConnectIndex(typeId, indexId);
	    },

	    //点击元素后 执行拖动的准备工作
	    handleItemMouseDown: function handleItemMouseDown(typeId, indexId) {
	        var data = this.getData(typeId);
	        this.setState({
	            activeEl: data[typeId + indexId]
	        });
	    },

	    //放开元素后 将activeEl设置为null
	    handleItemMouseUp: function handleItemMouseUp(typeId, indexId) {
	        this.setState({
	            activeEl: null
	        });
	    },
	    handleItemOuterClearClick: function handleItemOuterClearClick() {
	        this.setState({
	            activeIndex: []
	        });
	    },

	    //元素拖动逻辑
	    handleItemMouseMove: function handleItemMouseMove(x, y) {
	        if (this.state.activeEl) {
	            this.state.activeEl.itemLeft = x + 'px';
	            this.state.activeEl.itemTop = y + 'px';
	            this.state.activeEl.pos = {
	                x: x,
	                y: y
	            };
	            this.setState({
	                connectIndex: this.state.connectIndex,
	                dataInf: this.state.dataInf,
	                algorithmInf: this.state.algorithmInf
	            });
	        }
	    },

	    //点击删除按钮之后删除链接
	    removeConnectIndex: function removeConnectIndex(typeId, indexId) {
	        var _this3 = this;

	        var connectIndex = this.state.connectIndex;
	        var parent = void 0,
	            child = void 0,
	            i = void 0,
	            iIndex = void 0;

	        connectIndex.forEach(function (item, index) {
	            if (item.data.type == typeId && item.data.index == indexId) {
	                i = item;
	                iIndex = index;
	                child = item.child[0];
	            } else {
	                _this3.walkTree(item, function (node) {
	                    var temp = node.child[0];
	                    if (temp && temp.data.type == typeId && temp.data.index == indexId) {
	                        parent = node;
	                        i = temp;
	                        child = temp.child[0];
	                    }
	                });
	            }
	        });
	        if (i) {
	            i.data.connectInterface = {
	                inInterface: true,
	                outInterface: true
	            };
	            i.child.pop();
	        }
	        if (child) {
	            child.data.connectInterface.inInterface = true;
	        }
	        if (!parent) {
	            if (i) {
	                connectIndex.splice(iIndex, 1);
	            }
	        } else {
	            parent.data.connectInterface.outInterface = true;
	            parent.child.pop();
	            this.state.connectIndex = connectIndex.filter(function (item, index) {
	                if (item.data.type != parent.data.type || item.data.index != parent.data.index) {
	                    return item;
	                }
	            });
	        }
	        if (child && child.child) {
	            this.state.connectIndex.push(child);
	        }
	    },
	    render: function render() {
	        var dataInf = objToArr(this.state.dataInf),
	            algorithmInf = objToArr(this.state.algorithmInf);
	        return _react2.default.createElement(ContentComponent, _extends({
	            handleConnectButtonClick: this.handleConnectButtonClick,
	            handleRemoveButtonClick: this.handleRemoveButtonClick,
	            handleMouseOver: this.handleMouseOver,
	            handleMouseOut: this.handleMouseOut,
	            handleClick: this.handleClick,
	            handleItemMouseDown: this.handleItemMouseDown,
	            handleItemMouseUp: this.handleItemMouseUp,
	            handleItemMouseMove: this.handleItemMouseMove,
	            handleItemOuterClearClick: this.handleItemOuterClearClick
	        }, this.state, {
	            dataInf: dataInf,
	            algorithmInf: algorithmInf
	        }));
	    }
	});

	var ContentComponent = function (_Component) {
	    _inherits(ContentComponent, _Component);

	    function ContentComponent() {
	        _classCallCheck(this, ContentComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(ContentComponent).apply(this, arguments));
	    }

	    _createClass(ContentComponent, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.rebuild();
	            window.onresize = function () {
	                this.rebuild();
	            }.bind(this);
	        }
	    }, {
	        key: 'rebuild',
	        value: function rebuild() {
	            var container = this.refs.container;
	            var containerHeight = parseFloat(getComputedStyle(container)['height']);
	            function rebuildMargin() {
	                var freeHeight = getFreeContentHeight();
	                if (containerHeight < freeHeight) {
	                    container.style.marginTop = (freeHeight - containerHeight) / 2 + 'px';
	                }
	            }
	            rebuildMargin();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var dataInf = objToArr(this.props.dataInf),
	                algorithmInf = objToArr(this.props.algorithmInf);
	            return _react2.default.createElement(
	                'section',
	                {
	                    ref: 'container',
	                    style: {
	                        width: '1160px',
	                        margin: '0 auto',
	                        overflow: 'hidden'
	                    }
	                },
	                _react2.default.createElement(
	                    'section',
	                    {
	                        style: {
	                            width: '300px',
	                            float: 'left'
	                        }
	                    },
	                    _react2.default.createElement(Container, _extends({}, this.props, {
	                        dataInf: dataInf,
	                        val: '选择数据',
	                        type: '0'
	                    })),
	                    _react2.default.createElement(Container, _extends({}, this.props, {
	                        dataInf: algorithmInf,
	                        val: '选择算法',
	                        type: '1'
	                    }))
	                ),
	                _react2.default.createElement(
	                    'section',
	                    {
	                        style: {
	                            width: '800px',
	                            float: 'right'
	                        }
	                    },
	                    _react2.default.createElement(_combination2.default, _extends({}, this.props, {
	                        dataInf: dataInf,
	                        algorithmInf: algorithmInf
	                    }))
	                )
	            );
	        }
	    }]);

	    return ContentComponent;
	}(_react.Component);

	var Container = function (_Component2) {
	    _inherits(Container, _Component2);

	    function Container() {
	        _classCallCheck(this, Container);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(Container).apply(this, arguments));
	    }

	    _createClass(Container, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.rebuildMargin();
	        }
	    }, {
	        key: 'rebuildMargin',
	        value: function rebuildMargin() {
	            var itemContent = this.refs.itemContent;
	            var itemContentHeight = parseFloat(getComputedStyle(itemContent)['height']);
	            var CONTAINER_HEIGHT = 160;

	            if (itemContentHeight < CONTAINER_HEIGHT) {
	                itemContent.style.marginTop = (CONTAINER_HEIGHT - itemContentHeight) / 2 + 'px';
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this6 = this;

	            var dataInf = objToArr(this.props.dataInf),
	                algorithmInf = objToArr(this.props.algorithmInf);
	            // console.log(this.props)
	            return _react2.default.createElement(
	                'section',
	                {
	                    style: {
	                        width: '280px',
	                        height: '280px',
	                        background: '#f5f5f5',
	                        borderRadius: '100%',
	                        marginTop: '20px',
	                        overflow: 'hidden',
	                        border: '10px solid #f5f5f5'
	                    }
	                },
	                _react2.default.createElement(
	                    'div',
	                    {
	                        style: {
	                            background: 'rgb(84, 182, 231)',
	                            width: '100%',
	                            height: '60px',
	                            textAlign: 'center',
	                            lineHeight: '60px',
	                            color: '#f5f5f5',
	                            fontSize: '20px'
	                        }
	                    },
	                    this.props.val
	                ),
	                _react2.default.createElement(
	                    'div',
	                    {
	                        ref: 'itemContent',
	                        style: {
	                            width: '232px',
	                            maxHeight: '150px',
	                            overflowY: 'scroll',
	                            margin: '10px auto',
	                            paddingTop: '10px'
	                        }
	                    },
	                    dataInf.map(function (item, index) {
	                        return _react2.default.createElement(_data_item2.default, _extends({
	                            index: index,
	                            key: index
	                        }, item, _this6.props));
	                    })
	                )
	            );
	        }
	    }]);

	    return Container;
	}(_react.Component);

	exports.default = Content;

/***/ },

/***/ 196:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DataItem = _react2.default.createClass({
	    displayName: 'DataItem',
	    handleMouseOver: function handleMouseOver() {
	        this.props.handleMouseOver(this.props.type, this.props.index);
	    },
	    handleMouseOut: function handleMouseOut() {
	        this.props.handleMouseOut(this.props.type, this.props.index);
	    },
	    handleClick: function handleClick() {
	        this.props.handleClick(this.props.type, this.props.index);
	    },
	    render: function render() {
	        return _react2.default.createElement(DataItemComponent, _extends({}, this.props, {
	            background: this.props.background,
	            handleClick: this.handleClick,
	            handleMouseOut: this.handleMouseOut,
	            handleMouseOver: this.handleMouseOver
	        }));
	    }
	});

	var DataItemComponent = function (_Component) {
	    _inherits(DataItemComponent, _Component);

	    function DataItemComponent() {
	        _classCallCheck(this, DataItemComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(DataItemComponent).apply(this, arguments));
	    }

	    _createClass(DataItemComponent, [{
	        key: 'render',
	        value: function render() {
	            var index = this.props.index,
	                dataInf = this.props.dataInf;
	            return _react2.default.createElement(
	                'div',
	                {
	                    onMouseOver: this.props.handleMouseOver,
	                    onMouseOut: this.props.handleMouseOut,
	                    onClick: this.props.handleClick,
	                    style: {
	                        opacity: this.props.itemOpacity,
	                        width: '100px',
	                        height: '30px',
	                        float: 'left',
	                        marginLeft: this.props.index % 2 === 0 ? '0px' : '16px',
	                        marginBottom: '10px',
	                        background: dataInf[index].background,
	                        color: '#fff',
	                        position: 'relative',
	                        textAlign: 'center',
	                        lineHeight: '30px',
	                        cursor: 'pointer',
	                        transition: 'all .4s',
	                        overflow: 'hidden',
	                        borderRadius: this.props.type == '0' ? '20px' : '2px'
	                    }
	                },
	                this.props.value,
	                _react2.default.createElement(
	                    'span',
	                    {
	                        ref: 'addInf',
	                        style: {
	                            display: 'block',
	                            width: '60px',
	                            height: '30px',
	                            background: 'rgba(0, 0, 0, 0.3)',
	                            position: 'absolute',
	                            right: dataInf[index].right,
	                            top: '0px',
	                            transition: 'all .4s',
	                            color: 'rgb(84, 182, 231)'
	                        }
	                    },
	                    dataInf[index].buttonInnerHTML
	                )
	            );
	        }
	    }]);

	    return DataItemComponent;
	}(_react.Component);

	exports.default = DataItem;

/***/ },

/***/ 197:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _delete = __webpack_require__(198);

	var _delete2 = _interopRequireDefault(_delete);

	var _more = __webpack_require__(199);

	var _more2 = _interopRequireDefault(_more);

	var _connect_canvas = __webpack_require__(200);

	var _connect_canvas2 = _interopRequireDefault(_connect_canvas);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var getOffset = function () {
	    var left = void 0,
	        top = void 0;
	    var windowSize = {};
	    return function (context) {
	        if (!windowSize) {
	            windowSize.width = window.innerWidth;
	            windowSize.height = windowSize.innerHeight;
	        } else if (window.innerWidth !== windowSize.width || window.innerHeight !== windowSize.height) {
	            left = top = 0;
	        }

	        if (!left || !top) {
	            left = top = 0;
	            while (context) {
	                left += context.offsetLeft;
	                top += context.offsetTop;
	                context = context.offsetParent;
	            }
	        }

	        return {
	            x: left,
	            y: top
	        };
	    };
	}();

	var Combination = _react2.default.createClass({
	    displayName: 'Combination',

	    canvasWidth: 780,
	    canvasHeight: 780,
	    outerPadding: 10,
	    handleItemMouseMove: function handleItemMouseMove(ev) {
	        var ITEM_WIDTH = 46,
	            ITEM_HEIGHT = 46;

	        var offset = getOffset(this.refs.component.refs.content);

	        this.props.handleItemMouseMove(ev.pageX - offset.x - ITEM_WIDTH, ev.pageY - offset.y - ITEM_HEIGHT);
	    },
	    getContext: function getContext() {
	        return this.refs.component.refs.canvas.refs.canvasContent.refs.context.getContext('2d');
	    },
	    componentDidMount: function componentDidMount() {
	        var context = this.getContext();
	        context.lineWidth = 6;
	        context.lineJoin = 'round';
	    },
	    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
	        var activeIndex = nextProps.activeIndex;
	        var context = this.getContext();
	        if (activeIndex.length === 1) {
	            context.beginPath();
	            context.moveTo(activeIndex[0].pos.x + 91, activeIndex[0].pos.y);
	        } else {
	            this.drawSaveContext(nextProps.connectIndex);
	        }
	    },
	    drawSaveContext: function drawSaveContext(connectIndex) {
	        var context = this.getContext();
	        context.clearRect(0, 0, 1000, 1000);
	        connectIndex.forEach(function (item, index) {
	            while (item) {
	                context.beginPath();
	                context.moveTo(item.data.pos.x + 91, item.data.pos.y);
	                item = item.child[0];
	                item && context.lineTo(item.data.pos.x + 1, item.data.pos.y);
	                context.stroke();
	            }
	        });
	    },
	    handleCanvasMouseMove: function handleCanvasMouseMove(ev, id) {
	        var activeIndex = this.props.activeIndex;
	        if (activeIndex.length == 0) return;
	        var context = this.getContext();
	        var pos = getOffset(this.refs.component.refs.canvas.refs.canvasContent.refs.context);
	        this.drawSaveContext(this.props.connectIndex);
	        context.beginPath();
	        context.moveTo(activeIndex[0].pos.x + 91, activeIndex[0].pos.y);
	        context.lineTo(ev.pageX - pos.x, ev.pageY - pos.y);
	        context.stroke();
	    },
	    handleMouseMove: function handleMouseMove(ev, id) {
	        this.handleItemMouseMove(ev);
	        this.handleCanvasMouseMove(ev, id);
	    },
	    render: function render() {
	        return _react2.default.createElement(CombinationComponent, _extends({
	            ref: 'component'
	        }, this.props, {
	            canvasWidth: this.canvasWidth,
	            canvasHeight: this.canvasHeight,
	            handleMouseMove: this.handleMouseMove,
	            outerPadding: this.outerPadding
	        }));
	    }
	});

	var CombinationComponent = function (_Component) {
	    _inherits(CombinationComponent, _Component);

	    function CombinationComponent() {
	        _classCallCheck(this, CombinationComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(CombinationComponent).apply(this, arguments));
	    }

	    _createClass(CombinationComponent, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return _react2.default.createElement(
	                'section',
	                {
	                    ref: 'content',
	                    onMouseMove: this.props.handleMouseMove,
	                    onMouseUp: this.props.handleItemMouseUp,
	                    onClick: this.props.handleItemOuterClearClick,
	                    style: {
	                        width: '780px',
	                        height: '480px',
	                        border: '10px solid #f5f5f5',
	                        background: '#f5f5f5',
	                        borderRadius: '40px',
	                        marginTop: '70px',
	                        position: 'relative'
	                    }
	                },
	                _react2.default.createElement(
	                    'div',
	                    {
	                        style: {
	                            height: '50px',
	                            lineHeight: '50px',
	                            width: '100px',
	                            color: '#f5f5f5',
	                            fontSize: '20px',
	                            background: 'rgb(84, 182, 231)',
	                            textAlign: 'center',
	                            position: 'absolute',
	                            top: '-17px',
	                            left: '-42px',
	                            zIndex: '1',
	                            fontWeight: 'bold',
	                            transform: 'rotate(-45deg)'
	                        }
	                    },
	                    '组合'
	                ),
	                _react2.default.createElement(
	                    'section',
	                    {
	                        style: {
	                            width: '100%',
	                            position: 'relative',
	                            height: '100%'
	                        }
	                    },
	                    _react2.default.createElement(_connect_canvas2.default, _extends({
	                        ref: 'canvas'
	                    }, this.props)),
	                    this.props.dataInf.map(function (item, index) {
	                        return _react2.default.createElement(CombinationElement, _extends({
	                            key: index
	                        }, item, _this2.props));
	                    }),
	                    this.props.algorithmInf.map(function (item, index) {
	                        return _react2.default.createElement(CombinationElement, _extends({
	                            key: index
	                        }, item, _this2.props));
	                    })
	                )
	            );
	        }
	    }]);

	    return CombinationComponent;
	}(_react.Component);

	var CombinationElement = _react2.default.createClass({
	    displayName: 'CombinationElement',
	    handleClick: function handleClick(e) {
	        e.stopPropagation();
	        this.props.handleRemoveButtonClick(this.props.type, this.props.index);
	    },
	    handleMouseDown: function handleMouseDown() {
	        this.props.handleItemMouseDown(this.props.type, this.props.index);
	    },
	    handleConnectClick: function handleConnectClick(e) {
	        e.stopPropagation();
	        var buttonOuter = this.refs.CombinationElementComponent.refs.buttonOuter;
	        return {
	            x: parseFloat(buttonOuter.style.left),
	            y: parseFloat(buttonOuter.style.top)
	        };
	    },
	    render: function render() {
	        return _react2.default.createElement(CombinationElementComponent, _extends({
	            ref: 'CombinationElementComponent'
	        }, this.props, {
	            handleRemoveButtonClick: this.handleClick,
	            handleConnectClick: this.handleConnectClick,
	            handleMouseDown: this.handleMouseDown,
	            handleStopPropagation: this.handleStopPropagation
	        }));
	    }
	});

	var CombinationElementComponent = function (_Component2) {
	    _inherits(CombinationElementComponent, _Component2);

	    function CombinationElementComponent() {
	        _classCallCheck(this, CombinationElementComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(CombinationElementComponent).apply(this, arguments));
	    }

	    _createClass(CombinationElementComponent, [{
	        key: 'render',
	        value: function render() {
	            var index = this.props.index,
	                type = this.props.type;
	            return _react2.default.createElement(
	                'div',
	                {
	                    onMouseDown: this.props.handleMouseDown,
	                    ref: 'buttonOuter',
	                    style: {
	                        width: '80px',
	                        height: '80px',
	                        padding: this.props.outerPadding + 'px ' + this.props.outerPadding + 'px',
	                        display: this.props.itemHasAdd ? 'block' : 'none',
	                        opacity: .8,
	                        position: 'absolute',
	                        borderRadius: type == 1 ? '20px' : '100%',
	                        left: this.props.itemLeft,
	                        top: this.props.itemTop,
	                        background: this.props.background,
	                        cursor: 'pointer'
	                    }
	                },
	                _react2.default.createElement(
	                    'p',
	                    {
	                        style: {
	                            width: '80%',
	                            margin: '0 auto',
	                            textAlign: 'center',
	                            color: '#fff',
	                            height: '40px',
	                            lineHeight: '40px',
	                            fontSize: '14px',
	                            textOverflow: 'ellipsis',
	                            whiteSpace: 'nowrap',
	                            overflow: 'hidden',
	                            borderBottom: '2px solid #fff'
	                        }
	                    },
	                    this.props.value
	                ),
	                _react2.default.createElement(_delete2.default, this.props),
	                _react2.default.createElement(_more2.default, this.props),
	                _react2.default.createElement(InInterface, _extends({
	                    buttonType: 0,
	                    type: 0,
	                    handleConnectClick: this.props.handleConnectClick
	                }, this.props)),
	                _react2.default.createElement(InInterface, _extends({
	                    buttonType: 1,
	                    type: 1,
	                    handleConnectClick: this.props.handleConnectClick
	                }, this.props))
	            );
	        }
	    }]);

	    return CombinationElementComponent;
	}(_react.Component);

	var InInterface = _react2.default.createClass({
	    displayName: 'InInterface',
	    handleConnectClick: function handleConnectClick(e) {
	        var pos = this.props.handleConnectClick(e);
	        this.props.handleConnectButtonClick(this.props.type, this.props.index, this.props.buttonType, pos);
	    },
	    handleMouseDown: function handleMouseDown(e) {
	        e.stopPropagation();
	    },

	    // 次组件在初始化一次后便不再render
	    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	        return false;
	    },
	    render: function render() {
	        return _react2.default.createElement(InInterfaceComponent, _extends({}, this.props, {
	            handleMouseDown: this.handleMouseDown,
	            handleConnectClick: this.handleConnectClick,
	            buttonTypeLeft: this.buttonTypeLeft,
	            interfaceTop: this.interfaceTop
	        }));
	    }
	});

	var InInterfaceComponent = function (_Component3) {
	    _inherits(InInterfaceComponent, _Component3);

	    function InInterfaceComponent() {
	        _classCallCheck(this, InInterfaceComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(InInterfaceComponent).apply(this, arguments));
	    }

	    _createClass(InInterfaceComponent, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', {
	                onClick: this.props.handleConnectClick,
	                onMouseDown: this.props.handleMouseDown,
	                style: {
	                    width: '14px',
	                    height: '14px',
	                    border: '2px solid #fff',
	                    position: 'absolute',
	                    top: '50%',
	                    marginTop: '-7px',
	                    display: this.props.buttonType == 0 && this.props.type == 0 ? 'none' : 'block',
	                    left: this.props.buttonType == 1 ? '82px' : '0px',
	                    color: '#fff',
	                    textAlign: 'center',
	                    lineHeight: '14px'
	                }
	            });
	        }
	    }]);

	    return InInterfaceComponent;
	}(_react.Component);

	exports.default = Combination;

/***/ },

/***/ 198:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DeleteButton = _react2.default.createClass({
	    displayName: 'DeleteButton',
	    render: function render() {
	        return _react2.default.createElement(DeleteButtonComponent, this.props);
	    }
	});

	var DeleteButtonComponent = function (_Component) {
	    _inherits(DeleteButtonComponent, _Component);

	    function DeleteButtonComponent() {
	        _classCallCheck(this, DeleteButtonComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(DeleteButtonComponent).apply(this, arguments));
	    }

	    _createClass(DeleteButtonComponent, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'span',
	                {
	                    onClick: this.props.handleRemoveButtonClick,
	                    className: 'delete',
	                    style: {
	                        width: '16px',
	                        transition: 'all .4s',
	                        height: '16px',
	                        lineHeight: '16px',
	                        fontSize: '20px',
	                        borderRadius: '100%',
	                        border: '2px solid #fff',
	                        display: 'block',
	                        float: 'left',
	                        textAlign: 'center',
	                        color: '#fff',
	                        transform: 'rotate(45deg)',
	                        margin: '10px 10px'
	                    }
	                },
	                '+'
	            );
	        }
	    }]);

	    return DeleteButtonComponent;
	}(_react.Component);

	exports.default = DeleteButton;

/***/ },

/***/ 199:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MoreButton = _react2.default.createClass({
	    displayName: 'MoreButton',
	    render: function render() {
	        return _react2.default.createElement(MoreButtonComponent, this.props);
	    }
	});

	var MoreButtonComponent = function (_Component) {
	    _inherits(MoreButtonComponent, _Component);

	    function MoreButtonComponent() {
	        _classCallCheck(this, MoreButtonComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(MoreButtonComponent).apply(this, arguments));
	    }

	    _createClass(MoreButtonComponent, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'span',
	                {
	                    className: 'more',
	                    style: {
	                        width: '16px',
	                        height: '16px',
	                        transition: 'all .4s',
	                        lineHeight: '8px',
	                        fontSize: '20px',
	                        borderRadius: '100%',
	                        border: '2px solid #fff',
	                        display: 'block',
	                        float: 'left',
	                        textAlign: 'center',
	                        color: '#fff',
	                        margin: '10px 10px'
	                    }
	                },
	                '..'
	            );
	        }
	    }]);

	    return MoreButtonComponent;
	}(_react.Component);

	exports.default = MoreButton;

/***/ },

/***/ 200:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ConnectCanvas = _react2.default.createClass({
	    displayName: 'ConnectCanvas',
	    render: function render() {
	        return _react2.default.createElement(ConnectCanvasComponent, _extends({
	            ref: 'canvasContent'
	        }, this.props));
	    }
	});

	var ConnectCanvasComponent = function (_Component) {
	    _inherits(ConnectCanvasComponent, _Component);

	    function ConnectCanvasComponent() {
	        _classCallCheck(this, ConnectCanvasComponent);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(ConnectCanvasComponent).apply(this, arguments));
	    }

	    _createClass(ConnectCanvasComponent, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('canvas', {
	                ref: 'context',
	                width: this.props.canvasWidth,
	                height: this.props.canvasHeight
	            });
	        }
	    }]);

	    return ConnectCanvasComponent;
	}(_react.Component);

	exports.default = ConnectCanvas;

/***/ }

});